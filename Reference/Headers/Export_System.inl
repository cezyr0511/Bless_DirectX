USING(Engine)

//=For.Graphic_Device By.Ck 17.02.24 =======================================================================================================================================================================================================================================================================================
//-Getter------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LPDIRECT3DDEVICE9 Engine::Get_GraphicDev(void)
{
	return CGraphicDev::GetInstance()->Get_GraphicDev();
}
//-Setter------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Engine::Set_RenderState(D3DRENDERSTATETYPE eType, _ulong dwFlag)
{
	CGraphicDev::GetInstance()->Set_RenderState(eType, dwFlag);
}
//-General------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT Engine::Initialize_GraphicDev(HWND hWnd, CGraphicDev::WINMODE eMode, const _uint& iSizeX, const _uint& iSizeY, Engine::CGraphicDev** ppGraphicDev)
{
	return CGraphicDev::GetInstance()->Initialize_GraphicDev(hWnd, eMode, iSizeX, iSizeY, ppGraphicDev);
}
void Engine::Render_Begin(D3DXCOLOR Color)
{
	CGraphicDev::GetInstance()->Render_Begin(Color);
}
void Engine::Render_End(void)
{
	CGraphicDev::GetInstance()->Render_End();
}

//=For.Font By.Ck 17.02.24 =======================================================================================================================================================================================================================================================================================
//-Getter------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-Setter------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-General------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT Engine::Initialize_Font(LPDIRECT3DDEVICE9 pGraphicDev, const _tchar* pFontTag, const _tchar* pFontType, const _uint& iWidth, const _uint& iHeight, const _uint& iWeight)
{
	return CFont_Mgr::GetInstance()->Initialize_Font(pGraphicDev, pFontTag, pFontType, iWidth, iHeight, iWeight);
}

void Engine::Render_Font(const _tchar* pFontTag, const _tchar* pString, const _vec2* pPosition, D3DXCOLOR Color)
{
	CFont_Mgr::GetInstance()->Render_Font(pFontTag, pString, pPosition, Color);
}

//=For.Frame_Mgr By.Ck 17.02.28 =======================================================================================================================================================================================================================================================================================
//-Getter------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-Setter------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-General------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT Engine::Ready_Frames(const _tchar* pFrameTag, const _float& fCallCnt)
{
	return CFrame_Mgr::GetInstance()->Ready_Frames(pFrameTag, fCallCnt);
}

bool Engine::Permit_Call(const _tchar* pFrameTag, const _float& fTimeDelta)
{
	return CFrame_Mgr::GetInstance()->Permit_Call(pFrameTag, fTimeDelta);
}

//=For.Timer_Mgr By.Burger 17.02.28 =======================================================================================================================================================================================================================================================================================
//-Getter------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
_float Engine::Get_TimeDelta(const _tchar* pTimerTag)
{
	return CTimer_Mgr::GetInstance()->Get_TimeDelta(pTimerTag);
}
//-Setter------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-General------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT Engine::Ready_Timers(const _tchar* pTimerTag)
{
	return CTimer_Mgr::GetInstance()->Ready_Timers(pTimerTag);
}

void Engine::SetUp_TimeDelta(const _tchar* pTimerTag)
{
	CTimer_Mgr::GetInstance()->SetUp_TimeDelta(pTimerTag);
}

//=For.Input_Device By.Ck 17.02.28 =======================================================================================================================================================================================================================================================================================
//-Getter------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
_byte Engine::Get_DIKeyState(_ubyte byKeyID)
{
	return CInput_Device::GetInstance()->Get_DIKeyState(byKeyID);
}
_byte Engine::Get_DIMouseState(CInput_Device::MOUSEKEYSTATE byMouseID)
{
	return CInput_Device::GetInstance()->Get_DIMouseState(byMouseID);
}
_long Engine::Get_DIMouseMove(CInput_Device::MOUSEMOVESTATE byMouseMoveState)
{
	return CInput_Device::GetInstance()->Get_DIMouseMove(byMouseMoveState);
}
_bool OnceKeyDown( _ubyte nKey, _bool* pData)
{
	return CInput_Device::GetInstance()->OnceKeyDown(nKey, pData);
}
_bool OnceKeyUp( _ubyte nKey, _bool* pData)
{
	return CInput_Device::GetInstance()->OnceKeyUp(nKey, pData);
}
_bool OnceMouseDown( _ubyte nKey, _bool* pData)
{
	return CInput_Device::GetInstance()->OnceMouseDown(nKey, pData);
}
_bool OnceMouseUp( _ubyte nKey, _bool* pData)
{
	return CInput_Device::GetInstance()->OnceMouseUp(nKey, pData);
}
//-Setter------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-General------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT Engine::Ready_InputDevice(HINSTANCE hInst, HWND hWnd)
{
	return CInput_Device::GetInstance()->Ready_InputDevice(hInst, hWnd);
}
void Engine::SetUp_InputState(void)
{
	return CInput_Device::GetInstance()->SetUp_InputState();
}

//=Release_System====================================================================================================================================================================================================================================================================================================================
void Engine::Release_System(void)
{
	if(0 != CInput_Device::GetInstance()->DestroyInstance())
		MSG_BOX("CInput_Device Release Failed");

	if(0 != CTimer_Mgr::GetInstance()->DestroyInstance())
		MSG_BOX("CTimer_Mgr Release Failed");

	if(0 != CFrame_Mgr::GetInstance()->DestroyInstance())
		MSG_BOX("CFrame_Mgr Release Failed");

	if(0 != CFont_Mgr::GetInstance()->DestroyInstance())
		MSG_BOX("CFont_Mgr Release Failed");

	if(0 != CGraphicDev::GetInstance()->DestroyInstance())
		MSG_BOX("CGraphicDev Release Failed");

}